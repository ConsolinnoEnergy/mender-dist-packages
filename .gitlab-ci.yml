variables:
  # Packages versions
  MENDER_VERSION: "master"
  MENDER_CONNECT_VERSION: "master"
  MENDER_CONFIGURE_VERSION: "master"
  MENDER_MONITOR_VERSION: "master"
  # Bucket name
  S3_BUCKET_NAME: "mender"
  S3_BUCKET_NAME_PRIVATE: "mender-binaries"
  # Legacy path for mender-client: <version>/$S3_BUCKET_SUBPATH/...
  S3_BUCKET_SUBPATH: "dist-packages/debian"
  S3_BUCKET_SUBPATH_PRIVATE: "mender-monitor/debian"
  # APT repo path for incoming packages
  S3_BUCKET_REPO_PATH: "repos/debian/incoming"
  # Scripts folder subpath
  S3_BUCKET_SCRIPTS_PATH: "repos/scripts"
  # Update the 'latest' debian alias to a new client release
  PUBLISH_LATEST_CLIENT_PACKAGE: "false"
  # GPG keys for build and distribution, to be set by CI/CD variables
  GPG_PRIV_KEY_BUILD: ""
  GPG_PUB_KEY_BUILD: ""
  GPG_PRIV_KEY_DIST: ""
  # Whether to run acceptance tests.
  TEST_MENDER_DIST_PACKAGES: "true"
  # Whether to publish packages automatically - they can always be published manually
  PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC: "false"
  # Workaround for GitLab intermittent networking
  FF_NETWORK_PER_BUILD: 1

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits-signoffs.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-python3-format.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

stages:
  - build:images
  - build:packages
  - test
  - publish

build:images:
  stage: build:images
  rules:
    - changes:
      - Dockerfile
      - docker-build-images
      - mender-deb-package
  image: docker:git
  services:
    - docker:dind
  before_script:
    - apk --update --no-cache add bash
  script:
    # GPG key is available only in protected branches
    - if [ "$GPG_PRIV_KEY_BUILD" != "" ]; then
    -   GPG_KEY_BUILD="$GPG_PRIV_KEY_BUILD"
        ./docker-build-images
    - else
    -   ./docker-build-images
    - fi
    - docker save mendersoftware/mender-dist-packages:debian-builder-arm64 -o builder-arm64.tar
    - docker save mendersoftware/mender-dist-packages:debian-builder-armhf -o builder-armhf.tar
    - docker save mendersoftware/mender-dist-packages:debian-builder-amd64 -o builder-amd64.tar
  artifacts:
    paths:
      - builder*.tar

.template:build:packages:
  stage: build:packages
  image: docker:git
  services:
    - docker:dind
  script:
    - apk --update --no-cache add bash
    - ./docker-build-package mender-client $MENDER_VERSION
    - ./docker-build-package mender-connect $MENDER_CONNECT_VERSION
    - ./docker-build-package mender-configure $MENDER_CONFIGURE_VERSION
    - if [ -n "${MENDER_PRIVATE_REPO_ACCESS_TOKEN}" ]; then
    -   ./docker-build-package mender-monitor $MENDER_MONITOR_VERSION
    - fi
  artifacts:
    paths:
      - output/*

build:packages:local-image:
  extends: .template:build:packages
  rules:
    - changes:
      - Dockerfile
      - docker-build-images
      - mender-deb-package
  dependencies:
    - build:images
  before_script:
    - docker load -i builder-arm64.tar
    - docker load -i builder-armhf.tar
    - docker load -i builder-amd64.tar

build:packages:upstream-image:
  extends: .template:build:packages
  rules:
    - changes:
      - Dockerfile
      - docker-build-images
      - mender-deb-package
      when: never
  before_script:
    - docker pull mendersoftware/mender-dist-packages:debian-builder-arm64
    - docker pull mendersoftware/mender-dist-packages:debian-builder-armhf
    - docker pull mendersoftware/mender-dist-packages:debian-builder-amd64

test:check-commits:
  only:
    variables:
      - '$TEST_MENDER_DIST_PACKAGES == "true"'

test:check-license:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'

test:check-python3-formatting:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'

test:acceptance:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'
  stage: test
  image: docker:19.03-dind
  tags:
    - mender-qa-slave
  dependencies:
    # It depends on either of them
    - build:packages:local-image
    - build:packages:upstream-image
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    # DinD setup in mender-qa-slave
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH
    # Start dockerd in the background
    - /usr/local/bin/dockerd &
    # Wait for dockerd to start
    - |-
      MAX_WAIT=30
      while [ ! -e "/var/run/docker.sock" ] && [ $MAX_WAIT -gt 0 ]; do
        MAX_WAIT=$(($MAX_WAIT - 1))
        sleep 1
      done
    # Verify that the docker server is up and running
    - docker version
    # Git submodules
    - apk --update --no-cache add git
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - apk --update --no-cache add python3 py3-pip gcc openssh make openssl-dev
      libffi-dev libc-dev python3-dev bash musl-dev rust cargo
    - cd tests
    - pip3 install -r requirements.txt
    - python3 -m pytest -v
      --mender-client-version $MENDER_VERSION
      --mender-client-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-client-deb-version)
      --mender-connect-version $MENDER_CONNECT_VERSION
      --mender-connect-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-connect-deb-version)
      --mender-configure-version $MENDER_CONFIGURE_VERSION
      --mender-configure-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-configure-deb-version)
    - |-
        if [ -f ${CI_PROJECT_DIR}/output/mender-monitor-deb-version ]; then
          python3 -m pytest -v \
            --mender-client-version $MENDER_VERSION \
            --mender-client-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-client-deb-version) \
            --mender-connect-version $MENDER_CONNECT_VERSION \
            --mender-connect-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-connect-deb-version) \
            --mender-configure-version $MENDER_CONFIGURE_VERSION \
            --mender-configure-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-configure-deb-version) \
            --mender-monitor-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-monitor-deb-version) \
            --mender-monitor-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-monitor-deb-version) \
            --commercial-tests
        fi

publish:images:
  stage: publish
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - Dockerfile
        - docker-build-images
        - mender-deb-package
  image: docker:git
  services:
    - docker:dind
  tags:
    - docker
  dependencies:
    - build:images
  before_script:
    - docker load -i builder-arm64.tar
    - docker load -i builder-armhf.tar
    - docker load -i builder-amd64.tar
  script:
    - docker push mendersoftware/mender-dist-packages:debian-builder-arm64
    - docker push mendersoftware/mender-dist-packages:debian-builder-armhf
    - docker push mendersoftware/mender-dist-packages:debian-builder-amd64

.publish_helper_functions: &publish_helper_functions |
  # Bash function to check if the string is a final tag
  function is_final_tag () {
    version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && return 0 || return $?
  }
  # Bash function to check if the string is a build tag
  function is_build_tag () {
    version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-build[0-9]+$ ]] && return 0 || return $?
  }

.template:publish:s3:apt-repo:
  stage: publish
  image: debian:buster
  dependencies:
    # It depends on either of them
    - build:packages:local-image
    - build:packages:upstream-image
  before_script:
    - apt update && apt install -yyq gpg awscli
    # Check and import GPG keys
    - if [ -z "$GPG_PRIV_KEY_DIST" -o -z "$GPG_PUB_KEY_BUILD" ]; then
    -   echo "Error. GPG keys not available"
    -   exit 1
    - fi
    - echo "$GPG_PRIV_KEY_DIST" | gpg --import
    - echo "$GPG_PUB_KEY_BUILD" | gpg --import
    # Lock the bucket to block concurrent jobs
    - while aws s3 ls s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock; do
    -   echo "$S3_BUCKET_REPO_PATH locked, waiting..."
    -   sleep 10
    - done
    - touch lock
    - aws s3 mv lock s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock
  script:
    # Upload files: first .buildinfo and .deb, then .changes
    - for file in $(find output/ -name *.buildinfo -o -name *.deb); do
    -   aws s3 cp $file s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/
    - done
    - for file in $(find output/ -name *.changes); do
    -   aws s3 cp $file s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/
    - done
  after_script:
    - aws s3 rm s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock

publish:s3:apt-repo:manual:
  when: manual
  extends: .template:publish:s3:apt-repo

publish:s3:apt-repo:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:apt-repo

.template:publish:s3:docs-link:mender-client:
  stage: publish
  image: debian:buster
  dependencies:
    # It depends on either of them
    - build:packages:local-image
    - build:packages:upstream-image
  before_script:
    - apt update && apt install -yyq awscli
    - deb_version=$(cat output/mender-client-deb-version)
  script:
    - echo "Publishing ${MENDER_VERSION} packages to S3"
    # For master packages, the Debian version is "0.0~git[iso-date].[git-hash]-1" and we make a copy named "master" for GUI to use
    - for arch in amd64 arm64 armhf; do
        aws s3 cp output/mender-client_${deb_version}_${arch}.deb
          s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
        aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
          --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
        if [ "${MENDER_VERSION}" == "master" ]; then
          aws s3 cp output/mender-client_${deb_version}_${arch}.deb
            s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1_${arch}.deb;
          aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
            --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1_${arch}.deb;
        fi;
      done

publish:s3:docs-link:mender-client:manual:
  when: manual
  extends: .template:publish:s3:docs-link:mender-client

publish:s3:docs-link:mender-client:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:docs-link:mender-client

.publish-template:s3:scripts:install-mender-sh:
  stage: publish
  image: debian:buster
  before_script:
    - apt update && apt install -yyq awscli
  only:
    changes:
      - scripts/install-mender.sh

publish:staging:s3:scripts:install-mender-sh:
  extends: .publish-template:s3:scripts:install-mender-sh
  script:
    - echo "Publishing install-mender.sh to S3 (staging)"
    - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/staging/install-mender.sh --content-type text/plain
    - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/staging/install-mender.sh
  only:
    refs:
      - master

publish:production:s3:scripts:install-mender-sh:
  extends: .publish-template:s3:scripts:install-mender-sh
  script:
    - echo "Publishing install-mender.sh to S3 (production)"
    - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/install-mender.sh --content-type text/plain
    - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/install-mender.sh
  only:
    refs:
      - production

.template:publish:s3:mender-monitor:
  stage: publish
  image: debian:buster
  dependencies:
    # It depends on either of them
    - build:packages:local-image
    - build:packages:upstream-image
  before_script:
    - apt update && apt install -yyq awscli
    - *publish_helper_functions
  script:
    - echo "Publishing mender-monitor version ${MENDER_MONITOR_VERSION} to s3://${S3_BUCKET_NAME_PRIVATE}/${S3_BUCKET_SUBPATH_PRIVATE}/${MENDER_MONITOR_VERSION}/"
    - aws s3 cp output/mender-monitor*.deb s3://${S3_BUCKET_NAME_PRIVATE}/${S3_BUCKET_SUBPATH_PRIVATE}/${MENDER_MONITOR_VERSION}/
    # Make copies in known destinations to be consumed by get.mender.io script:
    # * For "experimental" channel, we make a copy of the newest master package in the master directory
    # * For "stable" channel, we make a copy in a separate "latest" subdirectory of the latest tagged version
    # This needs to be reworked before Mender 3.2, see MEN-5029 for more details.
    - if is_build_tag ${MENDER_MONITOR_VERSION} || [ "${MENDER_MONITOR_VERSION}" == "master" ]; then
    -   aws s3 cp output/mender-monitor*.deb s3://${S3_BUCKET_NAME_PRIVATE}/${S3_BUCKET_SUBPATH_PRIVATE}/master/mender-monitor_master-1_all.deb
    - fi
    - if is_final_tag ${MENDER_MONITOR_VERSION}; then
    -   aws s3 cp output/mender-monitor*.deb s3://${S3_BUCKET_NAME_PRIVATE}/${S3_BUCKET_SUBPATH_PRIVATE}/latest/mender-monitor_latest-1_all.deb
    - fi

publish:s3:mender-monitor:manual:
  when: manual
  extends: .template:publish:s3:mender-monitor

publish:s3:mender-monitor:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:mender-monitor
